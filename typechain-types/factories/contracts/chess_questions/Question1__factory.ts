/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Question1,
  Question1Interface,
} from "../../../contracts/chess_questions/Question1";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "piece",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
        ],
        internalType: "struct Chess.chess[]",
        name: "trueAnswer",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "answer",
        type: "uint256",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "piece",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
        ],
        internalType: "struct Chess.chess[]",
        name: "answer",
        type: "tuple[]",
      },
    ],
    name: "solve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107be806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637284e41614610046578063b0db5c5014610064578063e75e440914610094575b600080fd5b61004e6100c4565b60405161005b9190610264565b60405180910390f35b61007e60048036038101906100799190610470565b6100e4565b60405161008b91906104d2565b60405180910390f35b6100ae60048036038101906100a99190610519565b6101bf565b6040516100bb9190610590565b60405180910390f35b606060405180608001604052806044815260200161074560449139905090565b600080825190506000806002836100fb91906105da565b1461013b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013290610657565b60405180910390fd5b60005b828110156101b4578460008151811061015a57610159610677565b5b6020026020010151602001518560008151811061017a57610179610677565b5b60200260200101516000015161019091906106d5565b60ff168261019e9190610710565b91506002816101ad9190610710565b905061013e565b508092505050919050565b6000816101cb846100e4565b14905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561020e5780820151818401526020810190506101f3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610236826101d4565b61024081856101df565b93506102508185602086016101f0565b6102598161021a565b840191505092915050565b6000602082019050818103600083015261027e818461022b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102d78261021a565b810181811067ffffffffffffffff821117156102f6576102f561029f565b5b80604052505050565b6000610309610286565b905061031582826102ce565b919050565b600067ffffffffffffffff8211156103355761033461029f565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060ff82169050919050565b61036681610350565b811461037157600080fd5b50565b6000813590506103838161035d565b92915050565b60006040828403121561039f5761039e61034b565b5b6103a960406102ff565b905060006103b984828501610374565b60008301525060206103cd84828501610374565b60208301525092915050565b60006103ec6103e78461031a565b6102ff565b9050808382526020820190506040840283018581111561040f5761040e610346565b5b835b8181101561043857806104248882610389565b845260208401935050604081019050610411565b5050509392505050565b600082601f8301126104575761045661029a565b5b81356104678482602086016103d9565b91505092915050565b60006020828403121561048657610485610290565b5b600082013567ffffffffffffffff8111156104a4576104a3610295565b5b6104b084828501610442565b91505092915050565b6000819050919050565b6104cc816104b9565b82525050565b60006020820190506104e760008301846104c3565b92915050565b6104f6816104b9565b811461050157600080fd5b50565b600081359050610513816104ed565b92915050565b600080604083850312156105305761052f610290565b5b600083013567ffffffffffffffff81111561054e5761054d610295565b5b61055a85828601610442565b925050602061056b85828601610504565b9150509250929050565b60008115159050919050565b61058a81610575565b82525050565b60006020820190506105a56000830184610581565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006105e5826104b9565b91506105f0836104b9565b925082610600576105ff6105ab565b5b828206905092915050565b7f57726f6e6720616e737765720000000000000000000000000000000000000000600082015250565b6000610641600c836101df565b915061064c8261060b565b602082019050919050565b6000602082019050818103600083015261067081610634565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106e082610350565b91506106eb83610350565b92508160ff0483118215151615610705576107046106a6565b5b828202905092915050565b600061071b826104b9565b9150610726836104b9565b925082820190508082111561073e5761073d6106a6565b5b9291505056fe536f6c76696e67207175657374696f6e2062792063616c63756c6174652073756d206f662028696e646578202a20706f736974696f6e29206f66207069656365732e202ea2646970667358221220ddf77dcbc6144eebd6aff14cad6e7b52afda16a3f5911b698ba69d32638c50a964736f6c63430008100033";

type Question1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Question1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question1__factory extends ContractFactory {
  constructor(...args: Question1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Question1> {
    return super.deploy(overrides || {}) as Promise<Question1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Question1 {
    return super.attach(address) as Question1;
  }
  override connect(signer: Signer): Question1__factory {
    return super.connect(signer) as Question1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Question1Interface {
    return new utils.Interface(_abi) as Question1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question1 {
    return new Contract(address, _abi, signerOrProvider) as Question1;
  }
}
