/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Question2,
  Question2Interface,
} from "../../../contracts/chess_questions/Question2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "piece",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
        ],
        internalType: "struct Chess.chess[]",
        name: "trueAnswer",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "answer",
        type: "uint256",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "piece",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
        ],
        internalType: "struct Chess.chess[]",
        name: "answer",
        type: "tuple[]",
      },
    ],
    name: "solve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061085d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637284e41614610046578063b0db5c5014610064578063e75e440914610094575b600080fd5b61004e6100c4565b60405161005b919061022a565b60405180910390f35b61007e60048036038101906100799190610436565b6100e4565b60405161008b9190610498565b60405180910390f35b6100ae60048036038101906100a991906104df565b610185565b6040516100bb9190610556565b60405180910390f35b60606040518060800160405280604881526020016107e060489139905090565b600080825190506000805b8281101561017a57600285828151811061010c5761010b610571565b5b6020026020010151602001516101229190610702565b600286838151811061013757610136610571565b5b60200260200101516000015161014d9190610702565b610157919061072e565b60ff16826101659190610763565b9150808061017290610797565b9150506100ef565b508092505050919050565b600081610191846100e4565b14905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101d45780820151818401526020810190506101b9565b60008484015250505050565b6000601f19601f8301169050919050565b60006101fc8261019a565b61020681856101a5565b93506102168185602086016101b6565b61021f816101e0565b840191505092915050565b6000602082019050818103600083015261024481846101f1565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61029d826101e0565b810181811067ffffffffffffffff821117156102bc576102bb610265565b5b80604052505050565b60006102cf61024c565b90506102db8282610294565b919050565b600067ffffffffffffffff8211156102fb576102fa610265565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060ff82169050919050565b61032c81610316565b811461033757600080fd5b50565b60008135905061034981610323565b92915050565b60006040828403121561036557610364610311565b5b61036f60406102c5565b9050600061037f8482850161033a565b60008301525060206103938482850161033a565b60208301525092915050565b60006103b26103ad846102e0565b6102c5565b905080838252602082019050604084028301858111156103d5576103d461030c565b5b835b818110156103fe57806103ea888261034f565b8452602084019350506040810190506103d7565b5050509392505050565b600082601f83011261041d5761041c610260565b5b813561042d84826020860161039f565b91505092915050565b60006020828403121561044c5761044b610256565b5b600082013567ffffffffffffffff81111561046a5761046961025b565b5b61047684828501610408565b91505092915050565b6000819050919050565b6104928161047f565b82525050565b60006020820190506104ad6000830184610489565b92915050565b6104bc8161047f565b81146104c757600080fd5b50565b6000813590506104d9816104b3565b92915050565b600080604083850312156104f6576104f5610256565b5b600083013567ffffffffffffffff8111156105145761051361025b565b5b61052085828601610408565b9250506020610531858286016104ca565b9150509250929050565b60008115159050919050565b6105508161053b565b82525050565b600060208201905061056b6000830184610547565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561062657808604811115610602576106016105a0565b5b60018516156106115780820291505b808102905061061f856105cf565b94506105e6565b94509492505050565b60008261063f57600190506106fb565b8161064d57600090506106fb565b8160018114610663576002811461066d5761069c565b60019150506106fb565b60ff84111561067f5761067e6105a0565b5b8360020a915084821115610696576106956105a0565b5b506106fb565b5060208310610133831016604e8410600b84101617156106d15782820a9050838111156106cc576106cb6105a0565b5b6106fb565b6106de84848460016105dc565b925090508184048111156106f5576106f46105a0565b5b81810290505b9392505050565b600061070d82610316565b915061071883610316565b925061072660ff848461062f565b905092915050565b600061073982610316565b915061074483610316565b9250828201905060ff81111561075d5761075c6105a0565b5b92915050565b600061076e8261047f565b91506107798361047f565b9250828201905080821115610791576107906105a0565b5b92915050565b60006107a28261047f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036107d4576107d36105a0565b5b60018201905091905056fe536f6c76696e67207175657374696f6e2062792063616c63756c6174652073756d206f66202870696563655e32202b20706f736974696f6e5e3229206f66207069656365732e202ea26469706673582212206ad7e6482d56c3403a94a54c2f5c9cab4e1b0129d4c342daa17f3952fab5b61464736f6c63430008100033";

type Question2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Question2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question2__factory extends ContractFactory {
  constructor(...args: Question2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Question2> {
    return super.deploy(overrides || {}) as Promise<Question2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Question2 {
    return super.attach(address) as Question2;
  }
  override connect(signer: Signer): Question2__factory {
    return super.connect(signer) as Question2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Question2Interface {
    return new utils.Interface(_abi) as Question2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question2 {
    return new Contract(address, _abi, signerOrProvider) as Question2;
  }
}
