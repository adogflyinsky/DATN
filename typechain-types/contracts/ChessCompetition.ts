/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Chess {
  export type ChessStruct = {
    piece: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type ChessStructOutput = [number, number] & {
    piece: number;
    index: number;
  };
}

export declare namespace ChessCompetition {
  export type CompetitionInfoStruct = {
    owner: PromiseOrValue<string>;
    riddleId: PromiseOrValue<BigNumberish>;
    hashValue: PromiseOrValue<BytesLike>;
    prize: PromiseOrValue<BigNumberish>;
    participants: PromiseOrValue<string>[];
    questions: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ];
    answers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    seed: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
  };

  export type CompetitionInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string[],
    [string, string, string],
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    riddleId: BigNumber;
    hashValue: string;
    prize: BigNumber;
    participants: string[];
    questions: [string, string, string];
    answers: [BigNumber, BigNumber, BigNumber];
    seed: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
  };
}

export interface ChessCompetitionInterface extends utils.Interface {
  functions: {
    "QUESTION_NUMBER()": FunctionFragment;
    "calculateHashValue((uint8,uint8)[])": FunctionFragment;
    "competitionIndex(uint256)": FunctionFragment;
    "competitions(uint256)": FunctionFragment;
    "createCompetition(uint256,bytes32,uint256,address[3])": FunctionFragment;
    "fillAnswer(uint256,uint256)": FunctionFragment;
    "finishCompetition(uint256,(uint8,uint8)[])": FunctionFragment;
    "fund(uint256)": FunctionFragment;
    "funding(address)": FunctionFragment;
    "getCompetition(uint256)": FunctionFragment;
    "getQuestion(uint256,address)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "isParticipant(uint256)": FunctionFragment;
    "joinCompetition(uint256,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "prizeOfParticipant(address)": FunctionFragment;
    "removeCompetition(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "riddleIsInCompetitions(uint256)": FunctionFragment;
    "spendness(address)": FunctionFragment;
    "startCompetition(uint256,uint256,uint256)": FunctionFragment;
    "totalPrize()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "QUESTION_NUMBER"
      | "calculateHashValue"
      | "competitionIndex"
      | "competitions"
      | "createCompetition"
      | "fillAnswer"
      | "finishCompetition"
      | "fund"
      | "funding"
      | "getCompetition"
      | "getQuestion"
      | "getTimestamp"
      | "isParticipant"
      | "joinCompetition"
      | "onERC721Received"
      | "owner"
      | "prizeOfParticipant"
      | "removeCompetition"
      | "renounceOwnership"
      | "riddleIsInCompetitions"
      | "spendness"
      | "startCompetition"
      | "totalPrize"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "QUESTION_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHashValue",
    values: [Chess.ChessStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "competitionIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "competitions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompetition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillAnswer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishCompetition",
    values: [PromiseOrValue<BigNumberish>, Chess.ChessStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "funding",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompetition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCompetition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeOfParticipant",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompetition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riddleIsInCompetitions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendness",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startCompetition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "QUESTION_NUMBER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHashValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "competitionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "competitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeOfParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riddleIsInCompetitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spendness", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Funding(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetHashAnswer(uint256,bytes32)": EventFragment;
    "SetQuestions(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Funding"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHashAnswer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetQuestions"): EventFragment;
}

export interface FundingEventObject {
  investor: string;
  amount: BigNumber;
}
export type FundingEvent = TypedEvent<[string, BigNumber], FundingEventObject>;

export type FundingEventFilter = TypedEventFilter<FundingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetHashAnswerEventObject {
  riddleId: BigNumber;
  hashValue: string;
}
export type SetHashAnswerEvent = TypedEvent<
  [BigNumber, string],
  SetHashAnswerEventObject
>;

export type SetHashAnswerEventFilter = TypedEventFilter<SetHashAnswerEvent>;

export interface SetQuestionsEventObject {
  riddleId: BigNumber;
  numOfQuestions: BigNumber;
}
export type SetQuestionsEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetQuestionsEventObject
>;

export type SetQuestionsEventFilter = TypedEventFilter<SetQuestionsEvent>;

export interface ChessCompetition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChessCompetitionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    QUESTION_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateHashValue(
      trueAnswers: Chess.ChessStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    competitionIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    competitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        riddleId: BigNumber;
        hashValue: string;
        prize: BigNumber;
        seed: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    createCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _hashValue: PromiseOrValue<BytesLike>,
      _prize: PromiseOrValue<BigNumberish>,
      _questions: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillAnswer(
      _riddleId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      trueAnswers: Chess.ChessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fund(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    funding(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChessCompetition.CompetitionInfoStructOutput]>;

    getQuestion(
      _riddleId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    isParticipant(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prizeOfParticipant(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riddleIsInCompetitions(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    spendness(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPrize(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  QUESTION_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  calculateHashValue(
    trueAnswers: Chess.ChessStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  competitionIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  competitions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      riddleId: BigNumber;
      hashValue: string;
      prize: BigNumber;
      seed: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  createCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    _hashValue: PromiseOrValue<BytesLike>,
    _prize: PromiseOrValue<BigNumberish>,
    _questions: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillAnswer(
    _riddleId: PromiseOrValue<BigNumberish>,
    answer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    trueAnswers: Chess.ChessStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fund(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  funding(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChessCompetition.CompetitionInfoStructOutput>;

  getQuestion(
    _riddleId: PromiseOrValue<BigNumberish>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  isParticipant(
    _riddleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    _participant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prizeOfParticipant(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riddleIsInCompetitions(
    _riddleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  spendness(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startCompetition(
    _riddleId: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    QUESTION_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHashValue(
      trueAnswers: Chess.ChessStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    competitionIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    competitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        riddleId: BigNumber;
        hashValue: string;
        prize: BigNumber;
        seed: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    createCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _hashValue: PromiseOrValue<BytesLike>,
      _prize: PromiseOrValue<BigNumberish>,
      _questions: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    fillAnswer(
      _riddleId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      trueAnswers: Chess.ChessStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    fund(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    funding(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChessCompetition.CompetitionInfoStructOutput>;

    getQuestion(
      _riddleId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isParticipant(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prizeOfParticipant(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    riddleIsInCompetitions(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spendness(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Funding(address,uint256)"(
      investor?: null,
      amount?: null
    ): FundingEventFilter;
    Funding(investor?: null, amount?: null): FundingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetHashAnswer(uint256,bytes32)"(
      riddleId?: null,
      hashValue?: null
    ): SetHashAnswerEventFilter;
    SetHashAnswer(riddleId?: null, hashValue?: null): SetHashAnswerEventFilter;

    "SetQuestions(uint256,uint256)"(
      riddleId?: null,
      numOfQuestions?: null
    ): SetQuestionsEventFilter;
    SetQuestions(
      riddleId?: null,
      numOfQuestions?: null
    ): SetQuestionsEventFilter;
  };

  estimateGas: {
    QUESTION_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHashValue(
      trueAnswers: Chess.ChessStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    competitionIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    competitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _hashValue: PromiseOrValue<BytesLike>,
      _prize: PromiseOrValue<BigNumberish>,
      _questions: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillAnswer(
      _riddleId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      trueAnswers: Chess.ChessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fund(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    funding(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuestion(
      _riddleId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isParticipant(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prizeOfParticipant(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riddleIsInCompetitions(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spendness(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPrize(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    QUESTION_NUMBER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateHashValue(
      trueAnswers: Chess.ChessStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    competitionIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    competitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _hashValue: PromiseOrValue<BytesLike>,
      _prize: PromiseOrValue<BigNumberish>,
      _questions: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillAnswer(
      _riddleId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      trueAnswers: Chess.ChessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    funding(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuestion(
      _riddleId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isParticipant(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeOfParticipant(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riddleIsInCompetitions(
      _riddleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spendness(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startCompetition(
      _riddleId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPrize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
